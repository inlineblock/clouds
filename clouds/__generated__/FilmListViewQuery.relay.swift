/**
 * @generated SignedSource<<5eaa523eacdd8f83d4fd568863dbe6b6>>
 * @lightSyntaxTransform
 * @nogrep
 */

/*
 * Generated by Amphion fork of Relay Compiler
 * @generated SignedSource<<5eaa523eacdd8f83d4fd568863dbe6b6>>
 */
import Amphion
import SwiftUI

struct FilmListViewQueryVariables: Encodable {
}

class FilmListViewQueryResponse: Amphion.Fragment {
  @Published private(set) var allFilms: allFilms$data?;
  
  required init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: String.self)
    self.allFilms = try container.decodeIfPresent(allFilms$data.self, forKey: "allFilms");
    try! super.init(from: decoder);
  }
  
  class allFilms$data: Amphion.Fragment {
    @Published private(set) var edges: Array<edges$data?>?;
    
    required init(from decoder: Decoder) throws {
      let container = try decoder.container(keyedBy: String.self)
      self.edges = try container.decodeIfPresent([edges$data].self, forKey: "edges");
      try! super.init(from: decoder);
    }
    
    class edges$data: Amphion.Fragment {
      @Published private(set) var node: node$data?;
      
      required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        self.node = try container.decodeIfPresent(node$data.self, forKey: "node");
        try! super.init(from: decoder);
      }
      
      class node$data: Amphion.Fragment {
        @Published var id: String?;
        @Published var title: String?;
        @Published var asFilmListItemView_film: FilmListItemView_film;
        
        required init(from decoder: Decoder) throws {
          let container = try decoder.container(keyedBy: String.self)
          self.id = try container.decodeIfPresent(String.self, forKey: "id");
          self.title = try container.decodeIfPresent(String.self, forKey: "title");
          self.asFilmListItemView_film = try FilmListItemView_film(from: decoder);
          try! super.init(from: decoder);
        }
      }
    }
  }
}

struct FilmListViewQuery: Amphion.Operation {
  
  typealias TResponse = FilmListViewQueryResponse;
  typealias TVariables = FilmListViewQueryVariables;
  
  func factory(json: Data) throws -> TResponse {
    let decoder = JSONDecoder()
    let response = try! decoder.decode(AmphionJSONResponse.self, from: json);
    return response.data;
  }
  
  
  struct AmphionJSONResponse: Decodable {
    var data: TResponse;
    var errors: [OperationServerResponseError?]?;
  }
  
  public init(variables: TVariables) {
    self.variables = variables;
  }
  
  let variables: TVariables;
  private(set) var id: String? = nil;
  private(set) var operationName: String = "FilmListViewQuery";
  private(set) var text: String? = """
query FilmListViewQuery {
  allFilms(first: 5) {
    edges {
      node {
        ...FilmListItemView_film
        title
        id
      }
    }
  }
}

fragment FilmListItemView_film on Film {
  title
  releaseDate
}
"""
;
  private(set) var type: Amphion.AmphionOperationType = .Query;
}
